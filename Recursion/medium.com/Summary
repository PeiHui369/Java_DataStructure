@1 Factorial
# number*(factorial of number -1)
public static long factorial(int number){
        //base case - factorial of 0 or 1 is 1
        if (number <= 1) {
            return 1;
        }
        return number * factorial(number-1);
}

/*
public static long factorial(long input){
        long factorial = 1L;
        for(long i = input; i>0; i--){
            factorial = factorial * i;
        }
        return factorial;
}
*/

@2 Fibonacci series
# fn = fn-1 + fn-2
public static int fibonacci(int number){
        if(number == 1 || number == 2){
            return 1;
        }
        return fibonacci(number-1) + fibonacci(number-2); //tail recursion
    }

/*
    public static int fibonacci2(int number){
        if(number == 1 || number == 2){
            return 1;
        }
        int fibo1=1, fibo2=1, fibonacci=1;
        for (int i = 3; i <= number; i++){
            //Fibonacci number is sum of previous two Fibonacci number
            fibonacci = fibo1 + fibo2;
            fibo1 = fibo2;
            fibo2 = fibonacci;
        }
        return fibonacci; //Fibonacci number
    }
*/

@3 Reverse String
public static String reverse(String source){
        if(source == null || source.isEmpty()){
            return source;
        }
        String reverse = "";
        for(int i = source.length()-1; i>=0; i--){
            reverse = reverse + source.charAt(i);
        }
        return reverse;
    }
    
    /* With StringBuilder
    reverse = new StringBuilder(word).reverse().toString();
     */
     
     /* Check Palindrome
     public static boolean isPalindrome(int number) {
        int palindrome = number; // copied number into variable
        int reverse = 0;
        while (palindrome != 0) {
            int remainder = palindrome % 10;
            reverse = reverse * 10 + remainder;
            palindrome = palindrome / 10;
        }
        if (number == reverse) {
            return true;
        }
     */
     
@4 Count Down
public static void countDown(int number) {
        if (number <= 0) {
            System.out.print("0 ");
        } else {
            System.out.print(number + " ");
            countDown(number - 1);
        }
    }
    
@5 Reverse LinkedList
    //Stack used to store data
    //1. Traverse linked list till we find the tail, that would be new head for reversed linked list
    private Node reverseRecursively(Node node){
        Node newHead;
        //base case - tail of original linked list
        if((node.next == null)){
            return node;
        }
        newHead = reverseRecursively(node.next);

        //reverse the link e.g. C->D-> null will be null
        node.next.next = node;
        node.next = null;
        return newHead;
    }
    
    public void reverseRecursively(){
        head = reverseRecursively(head);
    }
/*
//Creates a new list by reversing direction, and subsequently insert the element at the start of the list
    public void reverseIteratively() {
        Node current = head;
        Node previous = null;
        Node forward = null;
        
        //traversing linked list until there is no more element
        while(current.next != null){
            //Saving reference of next node, since we are changing current node
            forward = current.next;
            //Inserting node at start of new list
            current.next = previous;
            previous = current;
            //Advancing to next node
            current = forward;
        }
        head = current;
        head.next = previous;
    }
*/

@06 Digits To Words
private static final String[] digitWords = {"zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"};

 public static void digitsToWords(int number) {
        if (number == 0) {
            System.out.println(digitWords[0]);
            return;
        }

        StringBuilder result = new StringBuilder();

        // Convert each digit to word and append to the result
        while (number > 0) {
            int digit = number % 10;
            result.insert(0, digitWords[digit]);
            result.insert(0, " ");
            number /= 10;
        }

        System.out.println(result.toString().trim());
    }

@07 Reverse Number
public static int reverseNumber(int number){
        return reverseNumberRecursive(number, 0);
    }
    
    private static int reverseNumberRecursive(int number, int reversedNumber){
        if (number == 0) {return reversedNumber;}
        else {
            int lastDigit = number % 10;
            reversedNumber = reversedNumber*10 + lastDigit;
            return reverseNumberRecursive(number/10, reversedNumber);
        }
    }
    
/*
public static int reverse(int number){
        int reverse = 0;
        int remainder = 0;
        do{
            remainder = number%10;
            reverse = reverse*10 + remainder;
            number = number/10;
         
        }while(number > 0);
     
        return reverse;
    }
*/

@08 
 public static int calcArithmeticSeriesSum(int currentNumber, int N){
        if (currentNumber == N){
            return currentNumber;
        }else{
            return currentNumber + calcArithmeticSeriesSum(currentNumber+1, N);
        }
    }
    
/*
public static int calculateArithmeticSeriesSum(int N){
        int firstTerm = 1;
        int lastTerm = N;
        int sum = (N/2) * (firstTerm + lastTerm);
        return sum;
    }
*/
    
@09 Math.pow( )

/*
public static long power (int x, int y){
        long result = x;
        for (int i = 1; i<y; i++){
            result = result * x;
        }
        return result;
    }
*/

@10 GCD using Euclid's algo
private static int findGCD(int number1, int number2){
        if(number2 == 0){
            return number1;
        }
        return findGCD(number2, number1%number2);
    }

@11 BST PreOrder Traversal (NLR)
private void preOrder(TreeNode node){
        if(node == null) {       //Reached the leaf node and cannot go deeper -> backtrack & go to another path
            return;
        }
        System.out.printf("%s ", node.data);
        preOrder(node.left);
        preOrder(node.right);
    }

/*
public void preOrderWithoutRecursion(){
        Stack <TreeNode> nodes = new Stack<>();
        nodes.push(root);
        while(!nodes.isEmpty()){
            TreeNode current = nodes.pop();
            System.out.printf("%s", current.data);
            
            if(current.right!=null){
                nodes.push(current.right);
            }
            if(current.left!=null){
                nodes.push(current.left);
            }
        }
    }
*/

@12 Convert Decimal to Binary
public static String convertToBinary(int decimal){
        if(decimal == 0){
            return "0"; //base case: decimal number is 0
        }else{
            int remainder = decimal % 2;
            int quotient = decimal/2;
            String binary = convertToBinary(quotient); //recursive call
            return binary + String.valueOf(remainder);
        }
    }
//Main: String binary = convertToDecimal(num) -> binary.substring(1)
/*
public static void convert(int input) {
        int copyOfInput = input;
        StringBuilder sb = new StringBuilder();
 
        while (copyOfInput > 0) {
            byte bit = (byte) (copyOfInput % 2);
            sb.append(bit);
            copyOfInput = copyOfInput / 2;
        }
 
        System.out.printf("\nDecimal number %d in Binary format is %s %n", 
                            input, sb.toString());
    }
*/

13 BST PostOrder Traversal (LRN)
private void postOrder(TreeNode node){
        if (node == null) {
            return;
        }
        postOrder(node.left);
        postOrder(node.right);
        System.out.printf("%s ", node.data);
    }

/*
public void postOrderWithoutRecursion(){
        Stack nodes = new Stack<>();
        nodes.push(root);
        
        while(!nodes.isEmpty()){
            TreeNode current = nodes.peek();
            
            if(current.isLeaf()){
                TreeNode node = nodes.pop();
                System.out.printf("%s ", node.data);
            }else{
                if(current.right != null){
                    nodes.push(current.right);
                    current.right = null;
                }
                if(current.left != null){
                    nodes.push(current.left);
                    current.left = null;
                }
            }
        }
    }
*/

14 BT InOrder Traversal (LNR)
    private void inOrder(TreeNode node){
        if (node == null){
            return;
        }

        inOrder(node.left);
        System.out.printf("%s ", node.data);
        inOrder(node.right);
    }

/*
    public void inOrderWithoutRecursion(){
        Stack nodes = new Stack<>();
        TreeNode current = root;
        
        while (!nodes.isEmpty() || current != null){
            if(current != null){
                nodes.push(current);
                current = current.left;
            }else{
                TreeNode node = nodes.pop();
                System.out.printf("%s ", node.data);
                current = node.right;
            }
        }
    }
*/

15 Count no. of leaf nodes
private int countLeaves (TreeNode node){
        if (node == null){
            return 0;
        }
        if(node.isLeaf()){
            return 1;
        }else{
            return countLeaves(node.left) + countLeaves(node.right);
        }
    }

    public int countLeafNodesRecursively(){
        return countLeaves(root);
    }

/*
public int countLeafNodes(){
        if (root == null) {
            return 0;
        }
        
        Stack stack = new Stack<>();
        stack.push(root);
        int count = 0;
        
        while (!stack.isEmpty()){
            TreeNode node = stack.pop();
            if (node.left != null){
                stack.push(node.left);
            }
            if (node.right != null){
                stack.push(node.right);
            }
            if(node.isLeaf()){
                count++;
            }
            return count;
        }
    }
*/

@16 Binary Search Algorithm
public static int performBinarySearch(int[] input, int number) {
        return binarySearchRecursive(input, number, 0, input.length - 1);
    }

private static int binarySearchRecursive(int[] input, int number, int low, int high){
        if (low > high) {return -1;} //Base case: element not found
        int middle = (low + high)/2;
        if(input[middle] == number){
            return middle; //Base case: element found
        }else if (input[middle] < number){
            return binarySearchRecursive(input, number,middle+1, high);
        }else{
            return binarySearchRecursive(input, number, low, middle-1)
        }
    }

/*
public static int performBinarySearch(int[] input, int number){
        int low = 0;
        int high = input.length - 1;

        while (high >= low){
            int middle = (low + high)/2;
            if (input[middle] == number){
                return middle;
            }else if(input[middle] < number){
                low = middle + 1;
            }else if (input[middle] > number){
                high = middle - 1;
            }
        }
        return -1;
    }
*/

@17 String Permutations
public static void permutation(String input){
        permutation("", input);
    }

    private static void permutation(String perm, String word){
        if (word.isEmpty()) {
            System.err.println(perm + word);
        }else{
            for (int i = 0; i < word.length(); i++){
                permutation(perm + word.charAt(i), word.substring(0,i) + word.substring(i+1, word.length()));
            }
        }
    }

@18 Sum of Digits
public static int calculateSumOfDigits(int number) {
        if (number == 0) {
            return 0; // Base case: reached the end of digits
        }

        int lastDigit = number % 10;
        int remainingDigits = number / 10;

        return lastDigit + calculateSumOfDigits(remainingDigits); // Recursive call
    }

/*
        int sum = 0;
        int input = number;
        while (input != 0) {
            int lastdigit = input % 10;
            sum += lastdigit;
            input /= 10;
        }
*/

@19 Tower Of Hanoi
public static void moveDisks(int n, String source, String destination, String auxiliary){
        if (n==1) {
            System.out.println("Move disk from " + source + " to " + destination);
            return;
        }
        moveDisks(n-1, source, auxiliary, destination);
        System.out.println("Move disk from " + source + " to " + destination);
        moveDisks(n-1, auxiliary, destination, source);
    }

@20 Bubble Sort (int arr)
public static void bubbleSort(int[] arr, int n){
        //Base case: If there is only one element or the array is empty, it is already sorted
        if (n <= 1) {return;}
        
        //One pass of bubble sort to move the largest element to the end
        for (int i = 0; i < n-1; i++){
            if(arr[i] > arr[i+1]){
                swap(arr, i, i+1);
            }
        }
        
        //Recursively sort the remaining elements
        bubbleSort(arr, n-1);
}
    
public static void swap(int[] arr, int i, int j){
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
}


/*
public static void bubbleSort(int[] unsorted){
        System.out.println("unsorted array before sorting : " + Arrays.toString((unsorted)));
        
        //Outer loop - need n-1 iteration to sort n elements
        for(int i = 0; i<unsorted.length-1; i++){
            //Inner loop to perform the comparison and swapping between adjacent numbers
            //After each iteration one index from last is sorted
            for(int j = 1; j<unsorted.length-i; j++){
                //If the current number is greater then swap those two
                if(unsorted[j-1] > unsorted[j]){
                    int temp = unsorted[j];
                    unsorted[j] = unsorted[j-1];
                    unsorted[j-1] = temp;
                }
            }
            System.out.printf("unsorted array after %d pass %s: %n", i+1, Arrays.toString(unsorted));
        }
    }
*/

@21 Quick Sort
//sorts given array using Quicksort
    public static void quickSort(int[] array){
        recursiveQuickSort(array, 0 , array.length-1);
    }

    //array: input array
    //startIdx: start index of the array
    //endIdx: end index of the array
    public static void recursiveQuickSort(int[] array, int startIdx, int endIdx){
        int idx = partition(array, startIdx, endIdx);
        //Recursively call quicksort with left part of the partitioned array
        if (startIdx < idx-1){
            recursiveQuickSort(array, startIdx, idx-1);
        }
        //Recursively call quick sort with right part of the partitioned array
        if(endIdx > idx){
            recursiveQuickSort(array, idx, endIdx);
        }
    }

    //Divides array from pivot, left side contains elements less than pivot while right side contains element greater than pivot
    //array: array to partitioned
    //left: lower bound of the array
    //right: upper bound of the array
    public static int partition (int[] array, int left, int right){
        int pivot = array[left]; //taking first element as pivot

        while (left<=right){
            //searching number which is greater than pivot, bottom up
            while (array[left] < pivot){
                left++;
            }
            //searching number which is less than pivot, top down
            while (array[right] > pivot){
                right--;
            }
            //swap the values
            if (left <= right){
                int tmp = array[left];
                array[left] = array[right];
                array[right] = tmp;

                //increment left index and decrement right index
                left++;
                right--;
            }
        }
        return left;
    }

@22 Merge Sort
public static void mergeSort(int[] array){
        if(array.length <= 1) {return;} //Base case: array is already sorted or empty
        int mid = array.length/2;
        int[] leftArray = Arrays.copyOfRange(array, 0, mid);
        int[] rightArray = Arrays.copyOfRange(array, mid, array.length);

        mergeSort(leftArray);    //Recursively sort the left subarray
        mergeSort(rightArray);   //Recursively sort the right subarray

        merge(array, leftArray, rightArray); //Merge the sorted subarrays

    }

    private static void merge (int[] array, int[] leftArray, int[] rightArray){
        int leftIndex = 0;
        int rightIndex = 0;
        int resultIndex = 0;

        //Merge the elements from leftArray and rightArray into array in sorted order
        while(leftIndex < leftArray.length && rightIndex < rightArray.length){
            if(leftArray[leftIndex] <= rightArray[rightIndex]) {
                array[resultIndex++] = leftArray[leftIndex++];
            }else{
                array[resultIndex++] = rightArray[rightIndex++];
            }
        }
        //Copy any remianing elements from the left subarray
        while (leftIndex < leftArray.length) {
            array[resultIndex++] = leftArray[leftIndex++];
        }
        //Copy any remianing elements from the right subarray
        while (rightIndex < rightArray.length) {
            array[resultIndex++] = rightArray[leftIndex++];
        }
    }

/*
    public static Integer[] mergeArrayInAscendingOrder(int[] classA, int[] classB) {
        //merge two Arrays
        List < Integer > myList = new ArrayList < > ();
        for (int i: classA) {
            myList.add(i);
        }
        for (int j: classB) {
            myList.add(j);
        }
        Integer[] newArray = new Integer[myList.size()];
        myList.toArray(newArray);
        //sort them in ascending order
        for (int i = 0; i < newArray.length; i++) {
            for (int j = i; j < newArray.length; j++) {
                Integer temp = newArray[i];
                if (newArray[i] > newArray[j]) {
                    newArray[i] = newArray[j];
                    newArray[j] = temp;
                }
            }
        }
        System.out.println(Arrays.toString(newArray));
        return newArray;
    }
*/

@23 Nine Queen problem in chess
public class NineQueens{
    private static final int BOARD_SIZE = 9;
    private static final char QUEEN = 'Q';
    private static final char EMPTY = '.';

    private static char[][] board = new char [BOARD_SIZE][BOARD_SIZE];

    public static void main(String[] args){
        initializeBoard();
        solveNQueens(0);
    }

    private static void initializeBoard(){
        for (int i = 0; i<BOARD_SIZE; i++){
            for (int j = 0; j<BOARD_SIZE; j++){
                board[i][j] = EMPTY;
            }
        }
    }

    private static void solveNQueens(int column){
        if (column == BOARD_SIZE){
            //All queens have been successfully placed, print the solution
            printBoard();
            return;
        }
        for(int row = 0; row < BOARD_SIZE; row++){
            if(isSafe(row, column)){
                //Place the queen at (row, column)
                board[row][column] = QUEEN;
                //Recursively solve the problem for the next column
                solveNQueens(column + 1);
                //Remove the queen from (row, column) to explore other possibilities
                board[row][column] = EMPTY;
            }
        }
    }

    private static boolean isSafe(int row, int column){
        //Check if no queens threaten the current position
        //Check the row
        for(int i = 0; i<column; i++){
            if(board[row][i] == QUEEN){
                return false;
            }
        }
        //Check the upper diagonal
        for(int i = row, j = column; i>=0 && j>=0; i--, j--) {
            if (board[i][j] == QUEEN) {
                return false;
            }
        }

        //Check the lower diagonal
        for(int i = row, j= column; i < BOARD_SIZE && j >= 0; i++, j--){
            if(board[i][j] == QUEEN){
                return false;
            }
        }

        //The current position is safe
        return true;
    }

    private static void printBoard(){
        for(int i = 0; i<BOARD_SIZE; i++){
            for(int j = 0; j<BOARD_SIZE; j++){
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
        }
        System.out.println();
    }
}

@24 Regular Expression Matching
public class RegularExpressionMatching {
    public static boolean isMatch(String s, String p) {
        if (p.isEmpty()) {
            return s.isEmpty();
        }

        boolean firstMatch = !s.isEmpty() && (s.charAt(0) == p.charAt(0) || p.charAt(0) == '.');

        if (p.length() >= 2 && p.charAt(1) == '*') {
            return (isMatch(s, p.substring(2)) || (firstMatch && isMatch(s.substring(1), p)));
        } else {
            return firstMatch && isMatch(s.substring(1), p.substring(1));
        }
    }

    public static void main(String[] args) {
        String s = "aab";
        String p = "c*a*b";

        boolean isMatched = isMatch(s, p);
        System.out.println(isMatched);
    }
}

@25 Merge 2 Sorted Linked Lists
class ListNode {
    int val;
    ListNode next;

    ListNode(int val) {
        this.val = val;
    }
}

public class MergeSortedLinkedLists {
    public static ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if (l1 == null) {
            return l2;
        }
        if (l2 == null) {
            return l1;
        }

        ListNode merged;
        if (l1.val <= l2.val) {
            merged = l1;
            merged.next = mergeTwoLists(l1.next, l2);
        } else {
            merged = l2;
            merged.next = mergeTwoLists(l1, l2.next);
        }

        return merged;
    }

    public static void printList(ListNode head) {
        ListNode current = head;
        while (current != null) {
            System.out.print(current.val + " ");
            current = current.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        // Create the first sorted linked list: 1 -> 3 -> 5
        ListNode l1 = new ListNode(1);
        l1.next = new ListNode(3);
        l1.next.next = new ListNode(5);

        // Create the second sorted linked list: 2 -> 4 -> 6
        ListNode l2 = new ListNode(2);
        l2.next = new ListNode(4);
        l2.next.next = new ListNode(6);

        // Merge the two sorted linked lists
        ListNode merged = mergeTwoLists(l1, l2);

        // Print the merged list
        System.out.print("Merged List: ");
        printList(merged);
    }
}

@26 Power of 3
public class PowerOfThree {
    public static boolean isPowerOfThree(int n) {
        if (n == 0) {
            return false;
        }
        if (n == 1) {
            return true;
        }
        if (n % 3 != 0) {
            return false;
        }
        return isPowerOfThree(n / 3);
    }

    public static void main(String[] args) {
        int number = 27;
        boolean result = isPowerOfThree(number);
        System.out.println(number + " is a power of three: " + result);
    }
}

@27 Remove element from linked list
class ListNode {
    int val;
    ListNode next;

    ListNode(int val) {
        this.val = val;
    }
}

public class RemoveElementFromLinkedList {
    public static ListNode removeElement(ListNode head, int val) {
        if (head == null) {
            return null;
        }

        if (head.val == val) {
            return removeElement(head.next, val);
        }

        head.next = removeElement(head.next, val);
        return head;
    }

    public static void printList(ListNode head) {
        ListNode current = head;
        while (current != null) {
            System.out.print(current.val + " ");
            current = current.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        // Create the linked list: 1 -> 2 -> 3 -> 4 -> 5
        ListNode head = new ListNode(1);
        head.next = new ListNode(2);
        head.next.next = new ListNode(3);
        head.next.next.next = new ListNode(4);
        head.next.next.next.next = new ListNode(5);

        int target = 3;

        System.out.println("Original List:");
        printList(head);

        // Remove the target element from the list
        ListNode newHead = removeElement(head, target);

        System.out.println("List after removing " + target + ":");
        printList(newHead);
    }
}
