@1 Factorial
# number*(factorial of number -1)
public static long factorial(int number){
        //base case - factorial of 0 or 1 is 1
        if (number <= 1) {
            return 1;
        }
        return number * factorial(number-1);
}

/*
public static long factorial(long input){
        long factorial = 1L;
        for(long i = input; i>0; i--){
            factorial = factorial * i;
        }
        return factorial;
}
*/

@2 Fibonacci series
# fn = fn-1 + fn-2
public static int fibonacci(int number){
        if(number == 1 || number == 2){
            return 1;
        }
        return fibonacci(number-1) + fibonacci(number-2); //tail recursion
    }

/*
    public static int fibonacci2(int number){
        if(number == 1 || number == 2){
            return 1;
        }
        int fibo1=1, fibo2=1, fibonacci=1;
        for (int i = 3; i <= number; i++){
            //Fibonacci number is sum of previous two Fibonacci number
            fibonacci = fibo1 + fibo2;
            fibo1 = fibo2;
            fibo2 = fibonacci;
        }
        return fibonacci; //Fibonacci number
    }
*/

@3 Reverse String
public static String reverse(String source){
        if(source == null || source.isEmpty()){
            return source;
        }
        String reverse = "";
        for(int i = source.length()-1; i>=0; i--){
            reverse = reverse + source.charAt(i);
        }
        return reverse;
    }
    
    /* With StringBuilder
    reverse = new StringBuilder(word).reverse().toString();
     */
     
     /* Check Palindrome
     public static boolean isPalindrome(int number) {
        int palindrome = number; // copied number into variable
        int reverse = 0;
        while (palindrome != 0) {
            int remainder = palindrome % 10;
            reverse = reverse * 10 + remainder;
            palindrome = palindrome / 10;
        }
        if (number == reverse) {
            return true;
        }
     */
     
@4 Count Down
public static void countDown(int number) {
        if (number <= 0) {
            System.out.print("0 ");
        } else {
            System.out.print(number + " ");
            countDown(number - 1);
        }
    }
    
@5 Reverse LinkedList
    //Stack used to store data
    //1. Traverse linked list till we find the tail, that would be new head for reversed linked list
    private Node reverseRecursively(Node node){
        Node newHead;
        //base case - tail of original linked list
        if((node.next == null)){
            return node;
        }
        newHead = reverseRecursively(node.next);

        //reverse the link e.g. C->D-> null will be null
        node.next.next = node;
        node.next = null;
        return newHead;
    }
    
    public void reverseRecursively(){
        head = reverseRecursively(head);
    }
/*
//Creates a new list by reversing direction, and subsequently insert the element at the start of the list
    public void reverseIteratively() {
        Node current = head;
        Node previous = null;
        Node forward = null;
        
        //traversing linked list until there is no more element
        while(current.next != null){
            //Saving reference of next node, since we are changing current node
            forward = current.next;
            //Inserting node at start of new list
            current.next = previous;
            previous = current;
            //Advancing to next node
            current = forward;
        }
        head = current;
        head.next = previous;
    }
*/

@06 Digits To Words
private static final String[] digitWords = {"zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"};

 public static void digitsToWords(int number) {
        if (number == 0) {
            System.out.println(digitWords[0]);
            return;
        }

        StringBuilder result = new StringBuilder();

        // Convert each digit to word and append to the result
        while (number > 0) {
            int digit = number % 10;
            result.insert(0, digitWords[digit]);
            result.insert(0, " ");
            number /= 10;
        }

        System.out.println(result.toString().trim());
    }

@07 Reverse Number
public static int reverseNumber(int number){
        return reverseNumberRecursive(number, 0);
    }
    
    private static int reverseNumberRecursive(int number, int reversedNumber){
        if (number == 0) {return reversedNumber;}
        else {
            int lastDigit = number % 10;
            reversedNumber = reversedNumber*10 + lastDigit;
            return reverseNumberRecursive(number/10, reversedNumber);
        }
    }
    
/*
public static int reverse(int number){
        int reverse = 0;
        int remainder = 0;
        do{
            remainder = number%10;
            reverse = reverse*10 + remainder;
            number = number/10;
         
        }while(number > 0);
     
        return reverse;
    }
*/

@08 
 public static int calcArithmeticSeriesSum(int currentNumber, int N){
        if (currentNumber == N){
            return currentNumber;
        }else{
            return currentNumber + calcArithmeticSeriesSum(currentNumber+1, N);
        }
    }
    
/*
public static int calculateArithmeticSeriesSum(int N){
        int firstTerm = 1;
        int lastTerm = N;
        int sum = (N/2) * (firstTerm + lastTerm);
        return sum;
    }
*/
    
@09 Math.pow( )

/*
public static long power (int x, int y){
        long result = x;
        for (int i = 1; i<y; i++){
            result = result * x;
        }
        return result;
    }
*/






