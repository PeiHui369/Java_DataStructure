/**
  * Java Class to represent singly linked list for demonstration purpose.
  * In order to understand How to reverse linked list, focus on two methods
  * reverseIteratively() and reverseRecursively().

  * @author Javin Paul
  */
public class SinglyLinkedList {
    private Node head;  // Head is the first node in linked list

    public void append(T data){
        if(head == null){
            head = new Node(data);
            return;
        }
        tail().next = new Node(data);
    }
 
    private Node tail() {
        Node tail = head;
     
        // Find last element of linked list known as tail
        while(tail.next != null){
            tail = tail.next;
        }      
        return tail;
     
    }

 
    @Override
    public String toString(){
        StringBuilder sb = new StringBuilder();
        Node current = head;
        while(current != null){
           sb.append(current).append("-->");
           current = current.next;
        }    
        if(sb.length() &gt;=3){
            sb.delete(sb.length() - 3, sb.length()); 
            // to remove --> from last node
        }
     
        return sb.toString();
    }

    /**
      * Reverse linked list using 3 pointers approach in O(n) time
      * It basically creates a new list by reversing direction, and
      * subsequently insert the element at the start of the list.
      */
    public void reverseIteratively() {
        Node current = head;
        Node previous = null;
        Node forward = null;
     
        // traversing linked list until there is no more element
        while(current.next != null){
         
            // Saving reference of next node, since we are changing current node
            forward = current.next;
         
            // Inserting node at start of new list
            current.next = previous;
            previous = current;
         
            // Advancing to next node
            current = forward;
        }
     
        head = current;
        head.next = previous;
    }
 
    /*
     * Reverse a singly linked list using recursion. In recursion Stack is
     * used to store data.   
     * 1. Traverse linked list till we find the tail, 
     * that would be new head for reversed linked list.
     */
    private Node reverseRecursively(Node node){
       Node newHead;
     
       //base case - tail of original linked list
       if((node.next == null)){
           return node;
       }
       newHead = reverseRecursively(node.next);
     
       //reverse the link e.g. C->D->null will be null       
       node.next.next = node;
      //break original link
       node.next = null;    
       return newHead;
    }
  
    public void reverseRecursively(){
        head = reverseRecursively(head);
    }  
 
   private static class Node {
        private Node next;
        private T data;

        public Node(T data) {
            this.data = data;
        }

        @Override
        public String toString() {
            return data.toString();
        }
    }
 
}

------------------------------------------------------------
/**
  * Java program to test code of reversing singly linked list in Java.
  * This test class test both iterative and recursive solution. Since
  * the same list is first reversed using loops, and then again using recursion.
  * You can see that final output is same as original linked list.

  * @author Javin Paul
  */
public class SinglyLinkedListTest {

    public static void main(String args[]) {
       SinglyLinkedList linkedlist = getDefaultList();
       System.out.println("linked list before reversing : " + linkedlist);     
       linkedlist.reverseIteratively();     
       System.out.println("linked list after reversing : " + linkedlist);
       linkedlist.reverseRecursively();
       System.out.println("linked list after reversing recursively: "
                                   + linkedlist);
           
    }
  
     private static SinglyLinkedList getDefaultList(){
        SinglyLinkedList linkedlist = new SinglyLinkedList();       
        linkedlist.append("A"); linkedlist.append("B"); linkedlist.append("C");
        linkedlist.append("D"); linkedlist.append("E"); linkedlist.append("F");
        return linkedlist;
    }
  
}

Output:
linked list before reversing : A-->B-->C-->D-->E-->F
linked list after reversing : F-->E-->D-->C-->B-->A
linked list after reversing recursively: A-->B-->C-->D-->E-->F

===================================================================
Sure! Let's go through the steps of the recursive reversal for the linked list 1 -> 2 -> 3 -> 4:

Step 1:
- Initially, the `node` parameter in the `reverseRecursively` method points to the head of the linked list: 1.
- Since `node.next` (2) is not null, we make a recursive call to `reverseRecursively` with `node.next` (2).

Step 2:
- Now, the `node` parameter points to 2.
- Again, since `node.next` (3) is not null, we make another recursive call to `reverseRecursively` with `node.next` (3).

Step 3:
- The `node` parameter is updated to 3.
- As `node.next` (4) is not null, we recursively call `reverseRecursively` with `node.next` (4).

Step 4:
- The `node` parameter now points to the last node, 4.
- Since `node.next` is null, we have reached the base case of the recursion.
- At this point, the function returns the current node (4), which becomes the new head of the reversed linked list.

Step 5:
- Going back to the previous recursive call with `node` equal to 3, we obtain the new head of the reversed linked list, which is 4.
- We update the link between 3 and 4 by setting `node.next.next` to `node`, making the link from 3 to 4 reverse: 3 -> 4 becomes 4 -> 3.

Step 6:
- We set `node.next` (4) to null to break the original link, ensuring that the last node (4) points to null.

Step 7:
- Returning to the recursive call with `node` equal to 2, we obtain the new head of the reversed linked list, which is 4.
- We update the link between 2 and 3 by setting `node.next.next` to `node`, making the link from 2 to 3 reverse: 2 -> 3 becomes 3 -> 2.

Step 8:
- We set `node.next` (3) to null to break the original link, ensuring that the last node (3) points to null.

Step 9:
- Finally, in the initial recursive call with `node` equal to 1, we obtain the new head of the reversed linked list, which is 4.
- We update the link between 1 and 2 by setting `node.next.next` to `node`, making the link from 1 to 2 reverse: 1 -> 2 becomes 2 -> 1.
- We set `node.next` (2) to null to break the original link, ensuring that the last node (2) points to null.

After these steps, the original linked list 1 -> 2 -> 3 -> 4 is reversed into 4 -> 3 -> 2 -> 1. The head of the linked list is updated to 4, representing the new head of the reversed linked list.
