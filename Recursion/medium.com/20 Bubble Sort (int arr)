In order to sort n elements you require n-1 iteration and almost n-1 comparison. 
To recap here is the logic for the bubble sort sorting algorithm :

1) Start comparing a[0] to a[1]

2) If a[0] > a[1] then swap numbers e.g. a[0]=a[1] and a[1]=a[0]

3) Compare a[1] to a[2] and repeat till you compare last pair

4) This is referred to as one pass and at the end of the first pass largest, the number is at last position and already sorted.

5) Just repeat this comparison again starting from a[0] but this time going till second last pair only

----------------------------------------------------------------------------
package test;

import java.util.Arrays;

public class BubbleSort {
  
    public static void main(String[] args) {
        int[] unsorted = {32, 39, 21, 45, 23, 3};
        bubbleSort(unsorted, unsorted.length);
        System.out.println("Sorted array: " + Arrays.toString(unsorted));
    }

    public static void bubbleSort(int[] arr, int n) {
        // Base case: If there is only one element or the array is empty, it is already sorted
        if (n <= 1) {
            return;
        }

        // One pass of bubble sort to move the largest element to the end
        for (int i = 0; i < n - 1; i++) {
            if (arr[i] > arr[i + 1]) {
                swap(arr, i, i + 1);
            }
        }

        // Recursively sort the remaining elements
        bubbleSort(arr, n - 1);
    }

    public static void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}

-------------------------------------------
In this recursive implementation, the bubbleSort method takes an additional parameter n, 
which represents the number of elements to consider in each recursive call. 
The base case checks if there is only one element or the array is empty, 
in which case it returns without any further sorting.

The algorithm performs one pass of the Bubble Sort algorithm to move the largest element to its correct position. 
Then, it recursively calls bubbleSort with n - 1 elements to sort the remaining elements. 
This process continues until the base case is reached.

Please note that while the recursive approach demonstrates the concept of using recursion to implement the Bubble Sort algorithm, 
it is not the most efficient way to sort an array. 
The recursive version has a time complexity of O(n^2), similar to the iterative version, but incurs additional overhead due to the recursive calls.
==============================================================
package test;

import java.util.Arrays;

/**
 * Java program to sort integer array using bubble sort sorting algorithm.
 * bubble sort is one of the simplest sorting algorithm but performance
 * of bubble sort is not good, it's average and worst-case performance
 * ranges in O(n2) and that's why it is not used to sort a large set of
 * unsorted data. Bubble sort can be used for educational and testing
 * purpose to sort a small number of data to avoid the performance penalty.
 * This program is also a good example of how to print contents of Array in Java
 *
 * @author http://java67.blogspot.com
 */
public class BubbleSort {
 
 
    public static void main(String args[]) {
        //testing our bubble sort method in Java
        int[] unsorted = {32, 39,21, 45, 23, 3};
        bubbleSort(unsorted);
     
        //one more testing of our bubble sort code logic in Java
        int[] test = { 5, 3, 2, 1};
        bubbleSort(test);
     
    }  
 
    /*
     * In bubble sort we need n-1 iteration to sort n elements
     * at end of first iteration larget number is sorted and subsequently numbers smaller
     * than that.
     */
    public static void bubbleSort(int[] unsorted){
        System.out.println("unsorted array before sorting : " + Arrays.toString(unsorted));
     
        // Outer loop - need n-1 iteration to sort n elements
        for(int i=0; i<unsorted.length -1; i++){
         
            //Inner loop to perform the comparison and swapping between adjacent numbers
            //After each iteration one index from last is sorted
            for(int j= 1; j<unsorted.length -i; j++){
             
                //If the current number is greater than swap those two
                if(unsorted[j-1] > unsorted[j]){
                    int temp = unsorted[j];
                    unsorted[j] = unsorted[j-1];
                    unsorted[j-1] = temp;
                }
            }
            System.out.printf("unsorted array after %d pass %s: %n", i+1, Arrays.toString(unsorted));
        }
    }

}

Output:
unsorted array before sorting : [32, 39, 21, 45, 23, 3]
unsorted array after 1 pass [32, 21, 39, 23, 3, 45]:
unsorted array after 2 pass [21, 32, 23, 3, 39, 45]:
unsorted array after 3 pass [21, 23, 3, 32, 39, 45]:
unsorted array after 4 pass [21, 3, 23, 32, 39, 45]:
unsorted array after 5 pass [3, 21, 23, 32, 39, 45]:
unsorted array before sorting : [5, 3, 2, 1]
unsorted array after 1 pass [3, 2, 1, 5]:
unsorted array after 2 pass [2, 1, 3, 5]:
unsorted array after 3 pass [1, 2, 3, 5]
