1) visit left node
2) visit root
3) visit right node

To implement this algorithm, you can write a method to traverse all nodes of binary tree using InOrder traversal by following steps:
1. Write a method inOrder(TreeNode node)
2. Check if node == null, if yes then return, this is our base case. 
3. Call the inOrder(node.left) to recursively visit left subtree
4. Print value of the node
5. Call the inOrder(node.right) to recursively traverse the right subtree. 

public class InOrderTraversal {
    public static void main(String[] args) throws Exception {
        // construct the binary tree given in question
        BinaryTree bt = BinaryTree.create();

        // traversing binary tree using InOrder traversal using recursion
        System.out.println("Printing nodes of a binary tree on InOrder using recursion");
        bt.inOrder();

        System.out.println(); // insert new line
    }
}

class BinaryTree {
    static class TreeNode {
        String data;
        TreeNode left, right;

        TreeNode(String value) {
            this.data = value;
            left = right = null;
        }

        boolean isLeaf() {
            return left == null ? right == null : false;
        }
    }

    // root of binary tree
    TreeNode root;

    /**
     * Traverse the binary tree using the InOrder traversal algorithm recursively.
     */
    public void inOrder() {
        inOrder(root);
    }

    private void inOrder(TreeNode node) {
        if (node == null) {
            return;
        }

        inOrder(node.left);
        System.out.printf("%s ", node.data);
        inOrder(node.right);
    }

    /**
     * Java method to create a binary tree with test data.
     *
     * @return a sample binary tree for testing
     */
    public static BinaryTree create() {
        BinaryTree tree = new BinaryTree();
        tree.root = new TreeNode("4");
        tree.root.left = new TreeNode("2");
        tree.root.left.left = new TreeNode("1");
        tree.root.left.right = new TreeNode("3");
        tree.root.right = new TreeNode("5");
        tree.root.right.right = new TreeNode("6");

        return tree;
    }
}

----------------------------------------------------------
@ Without recursion

import java.util.Stack;

/*
 * Java Program to traverse a binary tree 
 * using inorder traversal without recursion. 
 * In InOrder traversal first left node is visited, followed by root
 * and right node.
 * 
 * input:
 *     4
 *    / \
 *   2   5
 *  / \   \
 * 1   3   6
 * 
 * output: 1 2 3 4 5 6 
 */

public class InOrderTraversal {

  public static void main(String[] args) throws Exception {

    // construct the binary tree given in question
    BinaryTree bt = BinaryTree.create();

    // traversing binary tree using InOrder traversal using recursion
    System.out
        .println("printing nodes of a binary tree on InOrder using recursion");

    bt.inOrder();

    System.out.println(); // insert new line

    // traversing binary tree on InOrder traversal without recursion
    System.out
        .println("printing nodes of binary tree on InOrder using iteration");
    bt.inOrderWithoutRecursion();
  }

}

class BinaryTree {
  static class TreeNode {
    String data;
    TreeNode left, right;

    TreeNode(String value) {
      this.data = value;
      left = right = null;
    }

    boolean isLeaf() {
      return left == null ? right == null : false;
    }

  }

  // root of binary tree
  TreeNode root;

  /**
   * traverse the binary tree on InOrder traversal algorithm
   */
  public void inOrder() {
    inOrder(root);
  }

  private void inOrder(TreeNode node) {
    if (node == null) {
      return;
    }

    inOrder(node.left);
    System.out.printf("%s ", node.data);
    inOrder(node.right);
  }

  public void inOrderWithoutRecursion() {
    Stack nodes = new Stack<>();
    TreeNode current = root;

    while (!nodes.isEmpty() || current != null) {

      if (current != null) {
        nodes.push(current);
        current = current.left;
      } else {
        TreeNode node = nodes.pop();
        System.out.printf("%s ", node.data);
        current = node.right;
      }

    }
  }

  /**
   * Java method to create binary tree with test data
   * 
   * @return a sample binary tree for testing
   */
  public static BinaryTree create() {
    BinaryTree tree = new BinaryTree();
    TreeNode root = new TreeNode("4");
    tree.root = root;
    tree.root.left = new TreeNode("2");
    tree.root.left.left = new TreeNode("1");

    tree.root.left.right = new TreeNode("3");
    tree.root.right = new TreeNode("5");
    tree.root.right.right = new TreeNode("6");

    return tree;
  }

}

Output
printing nodes of a binary tree on InOrder using recursion
1 2 3 4 5 6 
printing nodes of a binary tree on InOrder using iteration
1 2 3 4 5 6 
