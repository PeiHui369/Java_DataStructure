- Important while deleting nodes of BST (else lose references need for deleting child trees)
        45
       / \
      25  55
     / \    \
    15  35   65
   /   /  \
  5   77   88

Output: 5 15 35 25 77 88 65 55 45 

1) visit the left subtree
2) visit the right subtree
3) print the value of the current node or root.

import java.util.Stack;

/*
* Java Program to traverse a binary tree 
* using postOrder traversal without recursion. 
* In postOrder traversal first left subtree is visited, followed by
*  right subtree
* and finally data of root or current node is printed.
* 
* input:
*       45
*      / \
*     25  55
*    / \    \
*   15  35   65
*  /   /  \
* 5   77   88
* 
* output: 5 15 35 25 77 88 65 55 45 
*/

public class Main {

public static void main(String[] args) throws Exception {

// construct the binary tree given in question
BinaryTree bt = BinaryTree.create();

// traversing binary tree using post order traversal using recursion
System.out.println("printing nodes of binary tree on post order using 
                         recursion");

bt.postOrder();

System.out.println(); // insert new line

// traversing binary tree on post order traversal without recursion
System.out.println("printing nodes of binary tree on post order using 
                        iteration");
bt.postOrderWithoutRecursion();
}

}

class BinaryTree {
static class TreeNode {
String data;
TreeNode left, right;

TreeNode(String value) {
this.data = value;
left = right = null;
}

boolean isLeaf() {
return left == null ? right == null : false;
}

}

// root of binary tree
TreeNode root;

/**
* traverse the binary tree on post order traversal algorithm
*/
public void postOrder() {
postOrder(root);
}

private void postOrder(TreeNode node) {
if (node == null) {
return;
}

postOrder(node.left); 
postOrder(node.right);
System.out.printf("%s ", node.data);
}

public void postOrderWithoutRecursion() {
Stack nodes = new Stack<>();
nodes.push(root);

while (!nodes.isEmpty()) {
TreeNode current = nodes.peek();

if (current.isLeaf()) {
TreeNode node = nodes.pop();
System.out.printf("%s ", node.data);
} else {

if(current.right != null){
nodes.push(current.right);
current.right = null;
}

if(current.left != null){
nodes.push(current.left);
current.left = null;
}
}

}
}

/**
* Java method to create binary tree with test data
* 
* @return a sample binary tree for testing
*/
public static BinaryTree create() {
BinaryTree tree = new BinaryTree();
TreeNode root = new TreeNode("45");
tree.root = root;
tree.root.left = new TreeNode("25");
tree.root.left.left = new TreeNode("15");
tree.root.left.left.left = new TreeNode("5");

tree.root.left.right = new TreeNode("35");
tree.root.right = new TreeNode("55");
tree.root.right.right = new TreeNode("65");
tree.root.right.right.left = new TreeNode("77");
tree.root.right.right.right = new TreeNode("88");



return tree;
}

}

Output
printing nodes of a binary tree on post order using recursion
5 15 35 25 77 88 65 55 45 
printing nodes of a binary tree on post order using iteration
5 15 35 25 77 88 65 55 45 

------------------------------------------------------------------
@ Debugged

import java.util.Stack;

/*
 * Java Program to traverse a binary tree
 * using postOrder traversal without recursion.
 * In postOrder traversal first left subtree is visited, followed by
 *  right subtree
 * and finally data of root or current node is printed.
 *
 * input:
 *       45
 *      / \
 *     25  55
 *    / \    \
 *   15  35   65
 *  /   /  \
 * 5   77   88
 *
 * output: 5 15 35 25 77 88 65 55 45
 */

public class Main {

    public static void main(String[] args) throws Exception {

// construct the binary tree given in question
        BinaryTree bt = BinaryTree.create();

// traversing binary tree using post order traversal using recursion
        System.out.println("printing nodes of binary tree on post order using recursion");

                bt.postOrder();

        System.out.println(); // insert new line

// traversing binary tree on post order traversal without recursion
        System.out.println("printing nodes of binary tree on post order using iteration");
                bt.postOrderWithoutRecursion();
    }

}

class BinaryTree {
    static class TreeNode {
        String data;
        TreeNode left, right;

        TreeNode(String value) {
            this.data = value;
            left = right = null;
        }

        boolean isLeaf() {
            return left == null ? right == null : false;
        }

    }

    // root of binary tree
    TreeNode root;

    /**
     * traverse the binary tree on post order traversal algorithm
     */
    public void postOrder() {
        postOrder(root);
    }

    private void postOrder(TreeNode node) {
        if (node == null) {
            return;
        }

        postOrder(node.left);
        postOrder(node.right);
        System.out.printf("%s ", node.data);
    }

    public void postOrderWithoutRecursion() {
        Stack nodes = new Stack<>();
        nodes.push(root);

        while (!nodes.isEmpty()) {
            TreeNode current = (TreeNode) nodes.peek();

            if (current.isLeaf()) {
                TreeNode node = (TreeNode) nodes.pop();
                System.out.printf("%s ", node.data);
            } else {

                if(current.right != null){
                    nodes.push(current.right);
                    current.right = null;
                }

                if(current.left != null){
                    nodes.push(current.left);
                    current.left = null;
                }
            }

        }
    }

    /**
     * Java method to create binary tree with test data
     *
     * @return a sample binary tree for testing
     */
    public static BinaryTree create() {
        BinaryTree tree = new BinaryTree();
        TreeNode root = new TreeNode("45");
        tree.root = root;
        tree.root.left = new TreeNode("25");
        tree.root.left.left = new TreeNode("15");
        tree.root.left.left.left = new TreeNode("5");

        tree.root.left.right = new TreeNode("35");
        tree.root.right = new TreeNode("55");
        tree.root.right.right = new TreeNode("65");
        tree.root.right.right.left = new TreeNode("77");
        tree.root.right.right.right = new TreeNode("88");



        return tree;
    }

}
