@26 Merge two sorted linked lists from their end

    // Function to merge two sorted lists from the end
    public static Node reverseMerge(Node a, Node b)
    {
        Node result = null;
 
        while (a != null && b != null)
        {
            if (a.data < b.data)
            {
                // take the node from the front of the list `a`, and move it
                // to the front of the result
 
                Node newNode = a;
                a = a.next;
 
                newNode.next = result;
                result = newNode;
            }
            else {
 
                // take the node from the front of the list `b`, and move it
                // to the front of the result
 
                Node newNode = b;
                b = b.next;
 
                newNode.next = result;
                result = newNode;
            }
        }
 
        while (b != null)
        {
            Node newNode = b;
            b = b.next;
 
            newNode.next = result;
            result = newNode;
        }
 
        while (a != null)
        {
            Node newNode = a;
            a = a.next;
 
            newNode.next = result;
            result = newNode;
        }
 
        return result;
    }

@27 Check Palindrome
// Wrapper over `Node` class
    static class NodeWrapper
    {
        public Node node;
 
        NodeWrapper(Node node) {
            this.node = node;
        }
    }
 
    // Helper function to insert a new node at the beginning of the linked list
    public static Node push(Node head, int data)
    {
        Node node = new Node(data);
        node.next = head;
        return node;    // return node, which would be the new head
    }
 
    // Recursive function to check if the linked list is a palindrome or not
    public static boolean checkPalindrome(NodeWrapper left, Node right)
    {
        // base case
        if (right == null) {
            return true;
        }
 
        boolean result = checkPalindrome(left, right.next) &&
                            (left.node.data == right.data);
        left.node = left.node.next;
 
        return result;
    }
 
    // Function to check if the linked list is a palindrome or not
    public static boolean checkPalin(Node head)
    {
        // Wrap the `head` node, so its reference can be changed inside the
        // `checkPalindrome()`
        return checkPalindrome(new NodeWrapper(head), head);
    }

# Recursion
// Recursive function to move the last node to the front of a given linked list
    public static Node rearrange(Node head, Node prev, Node curr)
    {
        // if the current node is the last
        if (curr.next == null)
        {
            // make its next point to the first node
            curr.next = head;
 
            // set its previous node to point to null
            prev.next = null;
 
            // return current reference (new head)
            return curr;
        }
 
        return rearrange(head, curr, curr.next);
    }
 
    // Function to move the last node to the front of a linked list
    public static Node rearrange(Node head)
    {
        // if the list contains at least two nodes
        if (head != null && head.next != null) {
            head = rearrange(head, null, head);
        }
 
        return head;
    }
 
@28 Move last node to front
@29
// Function to rearrange the linked list in a specific manner
    public static void rearrange(Node head)
    {
        // empty list or one node
        if (head == null || head.next == null) {
            return;
        }
 
        // create two dummy nodes
        Node dummyFirst = new Node();
        Node dummySecond = new Node();
 
        // tail pointer for the first and second list
        Node first = dummyFirst;
        Node second = dummySecond;
 
        Node curr = head;
 
        // iterate through the list and process two nodes at a time
        while (curr != null)
        {
            // move the current node to the first list
            first.next = curr;
            first = first.next;
 
            // move the next node to the second list
            if (curr.next != null)
            {
                second.next = curr.next;
                second = second.next;
                curr = curr.next;
            }
            curr = curr.next;
        }
 
        // combine the first list with the second list
        first.next = dummySecond.next;
        second.next = null;
    }
