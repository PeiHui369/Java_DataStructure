1. Naive
- iterate over original
- maintain 2 pointers to keep track of new list: 1 head pointer & 1 tail pointer

// A Linked List Node
class Node
{
    int data;
    Node next;
 
    Node(int data, Node next)
    {
        this.data = data;
        this.next = next;
    }
 
    Node() {}
}
 
class Main
{
    // Helper function to print a given linked list
    public static void printList(Node head)
    {
        Node ptr = head;
        while (ptr != null)
        {
            System.out.print(ptr.data + " —> ");
            ptr = ptr.next;
        }
 
        System.out.println("null");
    }
 
    // Function takes a linked list and returns its complete copy
    public static Node copyList(Node head)
    {
        Node current = head;    // used to iterate over the original list
        Node newList = null;    // head of the new list
        Node tail = null;       // point to the last node in a new list
 
        while (current != null)
        {
            // special case for the first new node
            if (newList == null)
            {
                newList = new Node(current.data, null);
                tail = newList;
            }
            else {
                tail.next = new Node();
                tail = tail.next;
                tail.data = current.data;
                tail.next = null;
            }
            current = current.next;
        }
 
        return newList;
    }
 
    public static void main(String[] args)
    {
        // input keys
        int[] keys = {1, 2, 3, 4};
 
        // points to the head node of the linked list
        Node head = null;
 
        // construct a linked list
        for (int i = keys.length - 1; i >= 0; i--) {
            head = new Node(keys[i], head);
        }
 
        // copy linked list
        Node copy = copyList(head);
 
        // print duplicate linked list
        printList(copy);
    }
}

2. Using push() function
// A Linked List Node
class Node
{
    int data;
    Node next;
 
    Node(int data, Node next)
    {
        this.data = data;
        this.next = next;
    }
}
 
class Main
{
    // Helper function to print a given linked list
    public static void printList(Node head)
    {
        Node ptr = head;
        while (ptr != null)
        {
            System.out.print(ptr.data + " —> ");
            ptr = ptr.next;
        }
 
        System.out.println("null");
    }
 
    // Function takes a linked list and returns a complete copy of that
    // list using a dummy node using the `push()` function
    public static Node copyList(Node head)
    {
        Node current = head;    // used to iterate over the original list
        Node newList = null;    // head of the new list
        Node tail = null;       // point to the last node in a new list
 
        while (current != null)
        {
            // special case for the first new node
            if (newList == null)
            {
                newList = new Node(current.data, newList);
                tail = newList;
            }
            else {
                // add each node at the tail
                tail.next = new Node(current.data, tail.next);
 
                // advance the tail to the new last node
                tail = tail.next;
            }
            current = current.next;
        }
 
        return newList;
    }
 
    public static void main(String[] args)
    {
        // input keys
        int[] keys = {1, 2, 3, 4};
 
        // points to the head node of the linked list
        Node head = null;
 
        // construct a linked list
        for (int i = keys.length - 1; i >= 0; i--) {
            head = new Node(keys[i], head);
        }
 
        // copy linked list
        Node dup = copyList(head);
 
        // print duplicate linked list
        printList(dup);
    }
}


@ Recursive
// A Linked List Node
class Node
{
    int data;
    Node next;
 
    Node(int data, Node next)
    {
        this.data = data;
        this.next = next;
    }
 
    Node(int data) {
        this(data, null);
    }
}
 
class Main
{
    // Helper function to print a given linked list
    public static void printList(Node head)
    {
        Node ptr = head;
        while (ptr != null)
        {
            System.out.print(ptr.data + " —> ");
            ptr = ptr.next;
        }
 
        System.out.println("null");
    }
 
    // Recursive function that takes a linked list and returns a complete
    // copy of that list
    public static Node copyList(Node head)
    {
        if (head == null) {
            return null;
        }
 
        // allocate a new node in a heap and set its data
        Node newNode = new Node(head.data);
 
        // recursively set the next field of the new node by recurring
        // for the rest nodes
        newNode.next = copyList(head.next);
 
        return newNode;
    }
 
    public static void main(String[] args)
    {
        // input keys
        int[] keys = {1, 2, 3, 4};
 
        // points to the head node of the linked list
        Node head = null;
 
        // construct a linked list
        for (int i = keys.length - 1; i >= 0; i--) {
            head = new Node(keys[i], head);
        }
 
        // copy linked list
        Node dup = copyList(head);
 
        // print duplicate linked list
        printList(dup);
    }
}
