Given a linked list of integers, split it into two lists containing alternating elements from the original list.

For example, if the original list is {1, 2, 3, 4, 5}, then one sublist should be {1, 3, 5} and the other should be {2, 4}. The elements in the output lists may be in any order. i.e., the sublists can be {5, 3, 1} and {4, 2} for input list {1, 2, 3, 4, 5}.
==========================================

1. Using moveNode() function
The simplest approach iterates over the source list and use moveNode() to pull nodes off the source and alternately put them on a and b.
The only strange part is that the nodes will be in the reverse order in the source list.


// A Linked List Node
class Node
{
    int data;
    Node next;
 
    Node(int data, Node next)
    {
        this.data = data;
        this.next = next;
    }
}
 
class Main
{
    // Helper function to print a given linked list
    public static void printList(String msg, Node head)
    {
        System.out.print(msg);
 
        Node ptr = head;
        while (ptr != null)
        {
            System.out.print(ptr.data + " —> ");
            ptr = ptr.next;
        }
 
        System.out.println("null");
    }
 
    /*
        Given the source list, split its nodes into two shorter lists.
        If we number the elements 0, 1, 2, … then all the even elements
        should go in the first list and all the odd elements in the second.
        The elements in the new lists may be in any order.
    */
    public static Node[] alternatingSplit(Node source)
    {
        // Split the nodes into `a` and `b` lists
        Node a = null;
        Node b = null;
        Node current = source;
 
        while (current != null)
        {
            // Move a node to `a`
 
            Node newNode = current;         // the front source node
            current = current.next;         // advance the source
 
            newNode.next = a;               // link the old dest off the new node
            a = newNode;                    // move dest to point to the new node
 
            if (current != null)
            {
                // Move a node to `b`
 
                newNode = current;          // the front source node
                current = current.next;     // advance the source
 
                newNode.next = b;           // link the old dest off the new node
                b = newNode;                // move dest to point to the new node
            }
        }
 
        return new Node[] { a, b };
    }
 
    public static void main(String[] args)
    {
        // input keys
        int[] keys = { 1, 2, 3, 4, 5, 6, 7 };
 
        // construct the first linked list
        Node head = null;
        for (int i = keys.length - 1; i >= 0; i--) {
            head = new Node(keys[i], head);
        }
 
        Node[] nodes = alternatingSplit(head);
 
        // print both lists
        printList("First List: ", nodes[0]);
        printList("Second List: ", nodes[1]);
    }
}

--------------------------------------------------
2. Using Dummy Nodes

// A Linked List Node
class Node
{
    int data;
    Node next;
 
    Node(int data, Node next)
    {
        this.data = data;
        this.next = next;
    }
 
    Node() {}
}
 
class Main
{
    // Helper function to print a given linked list
    public static void printList(String msg, Node head)
    {
        System.out.print(msg);
 
        Node ptr = head;
        while (ptr != null)
        {
            System.out.print(ptr.data + " —> ");
            ptr = ptr.next;
        }
 
        System.out.println("null");
    }
 
    /*
        Given the source list, split its nodes into two shorter lists.
        If we number the elements 0, 1, 2, … then all the even elements
        should go in the first list and all the odd elements in the second.
        The elements in the new lists may be in any order.
    */
    public static Node[] alternatingSplit(Node source)
    {
        Node aDummy = new Node();
        Node aTail = aDummy;            // points to the last node in `a`
        aDummy.next = null;
 
        Node bDummy = new Node();
        Node bTail = bDummy;            // points to the last node in `b`
        bDummy.next = null;
 
        Node current = source;
 
        while (current != null)
        {
            // add at `a` tail
 
            Node newNode = current;
            current = current.next;
 
            newNode.next = aTail.next;
            aTail.next = newNode;
 
            aTail = aTail.next;         // advance the `a` tail
            if (current != null)
            {
                // add at `b` tail
 
                newNode = current;
                current = current.next;
 
                newNode.next = bTail.next;
                bTail.next = newNode;
 
                bTail = bTail.next;     // advance the `b` tail
            }
        }
 
        return new Node[] { aDummy.next, bDummy.next };
    }
 
    public static void main(String[] args)
    {
        // input keys
        int[] keys = { 1, 2, 3, 4, 5, 6, 7 };
 
        // construct the first linked list
        Node head = null;
        for (int i = keys.length - 1; i >= 0; i--) {
            head = new Node(keys[i], head);
        }
 
        Node[] nodes = alternatingSplit(head);
 
        // print both lists
        printList("First List: ", nodes[0]);
        printList("Second List: ", nodes[1]);
    }
}

-------------------------------------------------------
3. Using Recursion

// A Linked List Node
class Node
{
    int data;
    Node next;
 
    Node(int data, Node next)
    {
        this.data = data;
        this.next = next;
    }
}
 
class Main
{
    // Helper function to print a given linked list
    public static void printList(String msg, Node head)
    {
        System.out.print(msg);
 
        Node ptr = head;
        while (ptr != null)
        {
            System.out.print(ptr.data + " —> ");
            ptr = ptr.next;
        }
 
        System.out.println("null");
    }
 
    // Recursive function to split a given linked list into two lists where
    // each list containing alternating elements from the original list.
    // The solution maintains the same order as the source list
    public static void alternatingSplit(Node odd, Node even)
    {
        if (odd == null || even == null) {
            return;
        }
 
        if (odd.next != null) {
            odd.next = odd.next.next;
        }
 
        if (even.next != null) {
            even.next = even.next.next;
        }
 
        alternatingSplit(odd.next, even.next);
    }
 
    /*
        Given the source list, split its nodes into two shorter lists.
        If we number the elements 0, 1, 2, … then all the even elements
        should go in the first list and all the odd elements in the second.
        The elements in the new lists may be in any order.
    */
    public static Node[] alternatingSplit(Node source)
    {
        if (source == null) {
            return new Node[] {null, null};
        }
 
        Node aRef = source;
        Node bRef = source.next;
        alternatingSplit(aRef, bRef);
 
        return new Node[] { aRef, bRef };
    }
 
    public static void main(String[] args)
    {
        // input keys
        int[] keys = { 1, 2, 3, 4, 5, 6, 7 };
 
        // construct the first linked list
        Node head = null;
        for (int i = keys.length - 1; i >= 0; i--) {
            head = new Node(keys[i], head);
        }
 
        Node[] nodes = alternatingSplit(head);
 
        // print both lists
        printList("First List: ", nodes[0]);
        printList("Second List: ", nodes[1]);
    }
}
