Given a linked list, split it into two sublists – one for the front half and one for the back half. If the total number of elements in the list is odd, the extra element should go in the front list.

For example, list {2, 3, 5, 7, 11} should yield the two lists {2, 3, 5} and {7, 11}.
-------------------------------------
1. Naive
Compute length, use for loop to hop over the right no. of nodes to find last node of front half, cut list at that point
// A Linked List Node
class Node
{
    int data;
    Node next;
 
    Node(int data, Node next)
    {
        this.data = data;
        this.next = next;
    }
}
 
class Main
{
    // Helper function to print a given linked list
    public static void printList(String msg, Node head)
    {
        System.out.print(msg);
 
        Node ptr = head;
        while (ptr != null)
        {
            System.out.print(ptr.data + " —> ");
            ptr = ptr.next;
        }
 
        System.out.println("null");
    }
 
    // Return the total number of nodes in a list
    public static int findLength(Node head)
    {
        int count = 0;
        Node ptr = head;
        while (ptr != null)
        {
            count++;
            ptr = ptr.next;
        }
        return count;
    }
 
    /*
        Split the given list's nodes into front and back halves,
        and return the two lists using an array.
        If the length is odd, the extra node should go in the front list.
    */
    public static Node[] frontBackSplit(Node source)
    {
        Node frontRef, backRef;
 
        int len = findLength(source);
        if (len < 2)
        {
            frontRef = source;
            backRef = null;
            return new Node[] { frontRef, backRef };
        }
 
        Node current = source;
 
        int hopCount = (len - 1) / 2;    // (figured these with a few drawings)
        for (int i = 0; i < hopCount; i++) {
            current = current.next;
        }
 
        // Now cut at current
        frontRef = source;
        backRef = current.next;
        current.next = null;
 
        return new Node[] { frontRef, backRef };
    }
 
    public static void main(String[] args)
    {
        // input keys
        int[] keys = {6, 3, 4, 8, 2, 9};
 
        // points to the head node of the linked list
        Node head = null;
 
        // construct a linked list
        for (int i = keys.length - 1; i >= 0; i--) {
            head = new Node(keys[i], head);
        }
 
        Node[] nodes = frontBackSplit(head);
 
        // print linked list
        printList("Front List: ", nodes[0]);
        printList("Back List: ", nodes[1]);
    }
}

==============================================================
2. Fast/Slow Pointer Strategy

// A Linked List Node
class Node
{
    int data;
    Node next;
 
    Node(int data, Node next)
    {
        this.data = data;
        this.next = next;
    }
}
 
class Main
{
    // Helper function to print a given linked list
    public static void printList(String msg, Node head)
    {
        System.out.print(msg);
 
        Node ptr = head;
        while (ptr != null)
        {
            System.out.print(ptr.data + " —> ");
            ptr = ptr.next;
        }
 
        System.out.println("null");
    }
 
    /*
        Split the given list's nodes into front and back halves,
        and return the two lists using an array.
        If the length is odd, the extra node should go in the front list.
        It uses the fast/slow reference strategy
    */
    public static Node[] frontBackSplit(Node source)
    {
        Node frontRef, backRef;
        // if the length is less than 2, handle it separately
        if (source == null || source.next == null)
        {
            frontRef = source;
            backRef = null;
            return new Node[] { frontRef, backRef };
        }
 
        Node slow = source;
        Node fast = source.next;
 
        // advance `fast` two nodes and `slow` by one node
        while (fast != null)
        {
            fast = fast.next;
            if (fast != null)
            {
                slow = slow.next;
                fast = fast.next;
            }
        }
 
        // `slow` is before the midpoint in the list, so split it in two
        // at that point.
        frontRef = source;
        backRef = slow.next;
        slow.next = null;
 
        return new Node[] { frontRef, backRef };
    }
 
    public static void main(String[] args)
    {
        // input keys
        int[] keys = {6, 3, 4, 8, 2, 9};
 
        // points to the head node of the linked list
        Node head = null;
 
        // construct a linked list
        for (int i = keys.length - 1; i >= 0; i--) {
            head = new Node(keys[i], head);
        }
 
        Node[] nodes = frontBackSplit(head);
 
        // print linked list
        printList("Front List: ", nodes[0]);
        printList("Back List: ", nodes[1]);
    }
}
