Given a singly linked list of integers, determine whether the linked list is a palindrome.

For example,

Input:  1 —> 2 —> 3 —> 2 —> 1 —> null
Output: Linked list is a palindrome
 
Input:  1 —> 2 —> 3 —> 3 —> 1 —> null
Output: Linked list is not a palindrome

The idea is to traverse the linked list and push all encountered elements into a stack. 
Then traverse the linked list again, and for each node, 
pop the top element from the stack and compare it with the node’s data. 
If a mismatch happens for any node, we can say that the linked list is not a palindrome.

import java.util.Stack;
 
// A Linked List Node
class Node
{
    int data;
    Node next;
 
    Node(int i)
    {
        this.data = i;
        this.next = null;
    }
}
 
class Main
{
    // Function to determine whether a given linked list is a palindrome
    public static boolean isPalindrome(Node head)
    {
        // construct an empty stack
        Stack<Integer> s = new Stack<>();
 
        // push all elements of the linked list into the stack
        Node node = head;
        while (node != null)
        {
            s.push(node.data);
            node = node.next;
        }
 
        // traverse the linked list again
        node = head;
        while (node != null)
        {
            // pop the top element from the stack
            int top = s.pop();
 
            // compare the popped element with the current node's data
            // return false if mismatch happens
            if (top != node.data) {
                return false;
            }
 
            // advance to the next node
            node = node.next;
        }
 
        // we reach here only when the linked list is a palindrome
        return true;
    }
 
    public static void main(String[] args)
    {
        Node head = new Node(1);
        head.next = new Node(2);
        head.next.next = new Node(3);
        head.next.next.next = new Node(2);
        head.next.next.next.next = new Node(1);
 
        if (isPalindrome(head)) {
            System.out.println("Linked List is a palindrome.");
        }
        else {
            System.out.println("Linked List is not a palindrome.");
        }
    }
}

Output:

Linked List is a palindrome.

----------------------------------------
2. 
We can determine whether a linked list is a palindrome in linear time and with constant space. 
The idea is to split the given list into two halves and reverse the second half. 
Then traverse both lists simultaneously and compare their data. 
If a mismatch happens for any node, we can say that the linked list is not a palindrome.

// A Linked List Node
class Node
{
    int data;
    Node next;
 
    // Constructor
    Node(int i)
    {
        this.data = i;
        this.next = null;
    }
}
 
class Main
{
    // Function to split nodes of a given linked list into two halves using the
    // fast/slow pointer strategy. It returns a pointer to the tail of the first half
    public static Node frontBackSplit(Node head)
    {
        Node slow = head;
        Node fast = head.next;
 
        // advance `fast` by two nodes, and advance `slow` by a single node
        while (fast != null)
        {
            fast = fast.next;
            if (fast != null)
            {
                slow = slow.next;
                fast = fast.next;
            }
        }
 
        return slow;
    }
 
    // Reverses a given linked list by changing its `.next` pointers and
    // its head pointer
    public static Node reverse(Node head)
    {
        Node prev = null;           // the previous pointer
        Node current = head;        // the main pointer
 
        // traverse the list
        while (current != null)
        {
            // tricky: note the next node
            Node next = current.next;
 
            current.next = prev;    // fix the current node
 
            // advance the two pointers
            prev = current;
            current = next;
        }
 
        // fix the head pointer to point to the new front
        head = prev;
        return head;
    }
 
    // Function to determine whether a given linked list is a palindrome
    public static boolean isPalindrome(Node head)
    {
        // if the length is less than 2, handle separately
        if (head == null || head.next == null) {
            return true;
        }
 
        Node a = head, b, aTail, bHead;
 
        // split the linked list into two halves (if the total number of nodes
        // is odd, the extra node will go in the first list)
        aTail = frontBackSplit(head);
 
        // `aTail` is before the midpoint in the list, so split it in two
        // at that point.
        b = aTail.next;
        aTail.next = null;
 
        // reverse second half
        b = reverse(b);
        bHead = b;
 
        // traverse both lists simultaneously and compare their data
        while (a != null && b != null)
        {
            // return false at first data mismatch
            if (a.data != b.data) {
                return false;
            }
 
            // advance both lists to the next nodes
            a = a.next;
            b = b.next;
        }
 
        // restore the second half
        bHead = reverse(bHead);
 
        // restore the original linked list before returning by
        // linking the first half with the second half
        aTail.next = bHead;
 
        // we reach here only when the linked list is a palindrome
        return true;
    }
 
    public static void main(String[] args)
    {
        Node head = new Node(1);
        head.next = new Node(2);
        head.next.next = new Node(3);
        head.next.next.next = new Node(2);
        head.next.next.next.next = new Node(1);
 
        if (isPalindrome(head)) {
            System.out.println("Linked list is a palindrome.");
        }
        else {
            System.out.println("Linked list is not a palindrome.");
        }
    }
}

3. Recursion
// A Linked List Node
class Node
{
    int data;
    Node next;
 
    // Constructor
    Node(int data)
    {
        this.data = data;
        this.next = null;
    }
}
 
class Main
{
    // Wrapper over `Node` class
    static class NodeWrapper
    {
        public Node node;
 
        NodeWrapper(Node node) {
            this.node = node;
        }
    }
 
    // Function to determine whether a given linked list is a palindrome
    public static boolean isPalindrome(Node curr, NodeWrapper head)
    {
        // base case: end of the list reached
        if (curr == null) {
            return true;
        }
 
        // advance all the way till the end of the list and
        // return false in case of any conflict
        if (!isPalindrome(curr.next, head)) {
            return false;
        }
 
        // check vs. "mirror" when "coming back" from recursion
        if (curr.data != head.node.data) {
            return false;
        }
 
        // advance "mirror" by one step for every single step "taken back"
        // in the recursion
        head.node = head.node.next;
        return true;
    }
 
    // Determine if a given linked list is a palindrome or not.
    // The function takes a pointer to the head node of the list.
    public static boolean isPalindrome(Node head) {
        return isPalindrome(head, new NodeWrapper(head));
    }
 
    public static void main(String[] args)
    {
        Node head = new Node(1);
        head.next = new Node(2);
        head.next.next = new Node(3);
        head.next.next.next = new Node(2);
        head.next.next.next.next = new Node(1);
 
        if (isPalindrome(head)) {
            System.out.println("Linked List is a palindrome.");
        }
        else {
            System.out.println("Linked List is not a palindrome.");
        }
    }
}

