Given a linked list, split it into two lists where each list contains alternating elements from the original list and then finally join them back together.

For example,

Input : 1 —> 2 —> 3 —> 4 —> 5 —> null
 
Output: 1 —> 3 —> 5 —> 2 —> 4 —> null

To split the given list into two, we can use temporary dummy header nodes for both lists as they are being built. 
Each sublist has a “tail” pointer that points to its current last node – that way, 
new nodes can be appended at the end of each list easily. 
The dummy nodes give the tail pointers something to point to initially. 
The dummy nodes are efficient in this case because they are temporary and allocated in the stack. 
Finally, after both lists are formed, we join them by rearranging their pointers and fixing the head node.

----------------------------------------
// A Linked List Node
class Node
{
    int data;
    Node next;
 
    public Node(int data, Node next)
    {
        this.data = data;
        this.next = next;
    }
 
    public Node() {}
}
 
class Main
{
    // Helper function to print a given linked list
    public static void printList(Node head)
    {
        Node ptr = head;
        while (ptr != null)
        {
            System.out.print(ptr.data + " —> ");
            ptr = ptr.next;
        }
 
        System.out.println("null");
    }
 
    // Function to rearrange the linked list in a specific manner
    public static void rearrange(Node head)
    {
        // empty list or one node
        if (head == null || head.next == null) {
            return;
        }
 
        // create two dummy nodes
        Node dummyFirst = new Node();
        Node dummySecond = new Node();
 
        // tail pointer for the first and second list
        Node first = dummyFirst;
        Node second = dummySecond;
 
        Node curr = head;
 
        // iterate through the list and process two nodes at a time
        while (curr != null)
        {
            // move the current node to the first list
            first.next = curr;
            first = first.next;
 
            // move the next node to the second list
            if (curr.next != null)
            {
                second.next = curr.next;
                second = second.next;
                curr = curr.next;
            }
            curr = curr.next;
        }
 
        // combine the first list with the second list
        first.next = dummySecond.next;
        second.next = null;
    }
 
    public static void main(String[] args)
    {
        // input keys
        int[] keys = { 1, 2, 3, 4, 5 };
 
        Node head = null;
        for (int i = keys.length - 1; i >= 0; i--) {
            head = new Node(keys[i], head);
        }
 
        rearrange(head);
 
        printList(head);
    }
}


Output:

1 —> 3 —> 5 —> 2 —> 4 —> null
