Given k sorted linked lists, merge them into a single list in increasing order.

In the previous post, we have discussed how to merge two sorted linked lists into one list. This post will merge k sorted linked lists into a single list efficiently.

 
For example,

Input:  k = 3
 
List 1: 1 —> 5 —> 7 —> NULL
List 2: 2 —> 3 —> 6 —> 9 —> NULL
List 3: 4 —> 8 —> 10 —> NULL
 
Output: 1 —> 2 —> 3 —> 4 —> 5 —> 6 —> 7 —> 8 —> 9 —> 10 —> NULL
================================================================
1. Naive Approach
to connect all linked lists into one list (order doesn’t matter). 
Then use the merge sort algorithm for the linked list to sort the list in ascending order.

2. Using Min Heap
to construct a min-heap of size k and insert each list’s first node into it. 
Then pop the root node (having minimum value) from the heap and insert the next node from the “same” list as the popped node. 
We repeat this process until the heap is exhausted.

import java.util.Arrays;
import java.util.Comparator;
import java.util.PriorityQueue;
 
// A Linked List Node
class Node
{
    int data;
    Node next;
 
    public Node(int data)
    {
        this.data = data;
        this.next = null;
    }
}
 
class Main
{
    // Utility function to print contents of a linked list
    public static void printList(Node node)
    {
        while (node != null)
        {
            System.out.print(node.data + " —> ");
            node = node.next;
        }
        System.out.print("null");
    }
 
    // The main function to merge given `k` sorted linked lists.
    // It takes array `lists` of size `k` and generates the sorted output
    public static Node mergeKLists(Node[] lists)
    {
        // create an empty min-heap using a comparison object for ordering the min-heap
        PriorityQueue<Node> pq;
        pq = new PriorityQueue<>(Comparator.comparingInt(a -> ((Node) a).data));
 
        // push the first node of each list into the min-heap
        pq.addAll(Arrays.asList(lists).subList(0, lists.length));
 
        // take two pointers, head and tail, where the head points to the first node
        // of the output list and tail points to its last node
        Node head = null, last = null;
 
        // run till min-heap is empty
        while (!pq.isEmpty())
        {
            // extract the minimum node from the min-heap
            Node min = pq.poll();
 
            // add the minimum node to the output list
            if (head == null) {
                head = last = min;
            }
            else {
                last.next = min;
                last = min;
            }
 
            // take the next node from the "same" list and insert it into the min-heap
            if (min.next != null) {
                pq.add(min.next);
            }
        }
 
        // return head node of the merged list
        return head;
    }
 
    public static void main(String[] s)
    {
        int k = 3;    // total number of linked lists
 
        // an array to store the head nodes of the linked lists
        Node[] lists = new Node[k];
 
        lists[0] = new Node(1);
        lists[0].next = new Node(5);
        lists[0].next.next = new Node(7);
 
        lists[1] = new Node(2);
        lists[1].next = new Node(3);
        lists[1].next.next = new Node(6);
        lists[1].next.next.next = new Node(9);
 
        lists[2] = new Node(4);
        lists[2].next = new Node(8);
        lists[2].next.next = new Node(10);
 
        // Merge all lists into one
        Node head = mergeKLists(lists);
        printList(head);
    }
}

3. Using Divide and Conquer
// A Linked List Node
class Node
{
    int data;
    Node next;
 
    public Node(int data)
    {
        this.data = data;
        this.next = null;
    }
}
 
class Main
{
    // Utility function to print contents of a linked list
    public static void printList(Node node)
    {
        while (node != null)
        {
            System.out.print(node.data + " —> ");
            node = node.next;
        }
        System.out.print("null");
    }
 
    // Takes two lists sorted in increasing order and merges their nodes
    // to make one big sorted list returned
    public static Node sortedMerge(Node a, Node b)
    {
        // base cases
        if (a == null) {
            return b;
        }
        else if (b == null) {
            return a;
        }
 
        Node result;
 
        // pick either `a` or `b`, and recur
        if (a.data <= b.data)
        {
            result = a;
            result.next = sortedMerge(a.next, b);
        }
        else {
            result = b;
            result.next = sortedMerge(a, b.next);
        }
 
        return result;
    }
 
    // The main function to merge given `k` sorted linked lists.
    // It takes array `lists` of size `k` and generates the sorted output
    public static Node mergeKLists(Node[] lists)
    {
        // base case
        if (lists == null || lists.length == 0) {
            return null;
        }
 
        int last = lists.length - 1;
 
        // repeat until only one list is left
        while (last != 0)
        {
            int i = 0, j = last;
 
            // `(i, j)` forms a pair
            while (i < j)
            {
                // merge list `j` with `i`
                lists[i] = sortedMerge(lists[i], lists[j]);
 
                // consider the next pair
                i++;
                j--;
 
                // if all pairs are merged, update last
                if (i >= j) {
                    last = j;
                }
            }
        }
 
        return lists[0];
    }
 
    public static void main(String[] s)
    {
        int k = 3;    // total number of linked lists
 
        // an array to store the head nodes of the linked lists
        Node[] lists = new Node[k];
 
        lists[0] = new Node(1);
        lists[0].next = new Node(5);
        lists[0].next.next = new Node(7);
 
        lists[1] = new Node(2);
        lists[1].next = new Node(3);
        lists[1].next.next = new Node(6);
        lists[1].next.next.next = new Node(9);
 
        lists[2] = new Node(4);
        lists[2].next = new Node(8);
        lists[2].next.next = new Node(10);
 
        // Merge all lists into one
        Node head = mergeKLists(lists);
 
        printList(head);
    }
}
