Given a linked list of integers, rearrange it such that every second node of the linked list is greater than its left and right nodes. 
In other words, rearrange the linked list node in alternating high-low.

Assume no duplicate nodes are present in the linked list. 
Several lists might satisfy the constraints; we need to print any one of them. For example,

Input:  1 —> 2 —> 3 —> 4 —> 5 —> 6 —> 7
Output: 1 —> 3 —> 2 —> 5 —> 4 —> 7 —> 6
 
 
Input:  9 —> 6 —> 8 —> 3 —> 7
Output: 6 —> 9 —> 3 —> 8 —> 7
 
 
Input:  6 —> 9 —> 2 —> 5 —> 1 —> 4
Output: 6 —> 9 —> 2 —> 5 —> 1 —> 4

The idea is to start from the second node in the linked list and 
advance two nodes in each iteration of the loop. 
If the previous node is greater than the current node, swap their values. 
Similarly, if the next node is greater than the current node, exchange both values. 
At the end of the loop, we will get the desired linked list that satisfies the given constraints.

// A Linked List Node
class Node
{
    int data;
    Node next;
 
    Node(int data, Node next)
    {
        this.data = data;
        this.next = next;
    }
}
 
class Main
{
    // Helper function to print a given linked list
    public static void printList(Node head)
    {
        Node ptr = head;
        while (ptr != null)
        {
            System.out.print(ptr.data + " —> ");
            ptr = ptr.next;
        }
 
        System.out.println("null");
    }
 
    // Rearrange the linked list so that it has alternating high, low values
    public static Node rearrange(Node head)
    {
        // empty list
        if (head == null) {
            return null;
        }
 
        Node prev = head;
        Node curr = head.next;
 
        // start from the second node
        while (curr != null)
        {
            // if the previous node is greater than the current node,
            // swap their values
            if (prev.data > curr.data)
            {
                int temp = prev.data;
                prev.data = curr.data;
                curr.data = temp;
            }
 
            // if the next node is greater than the current node,
            // swap their values
            if (curr.next != null && curr.next.data > curr.data)
            {
                int temp = curr.next.data;
                curr.next.data = curr.data;
                curr.data = temp;
            }
 
            // update `prev` and `curr` node
            prev = curr.next;
 
            if (curr.next == null) {
                break;
            }
 
            curr = curr.next.next;
        }
 
        return head;
    }
 
    public static void main(String[] args)
    {
        // input keys
        int[] keys = { 1, 2, 3, 4, 5, 6, 7, 8, 6 };
 
        Node head = null;
        for (int i = keys.length - 1; i >= 0; i--) {
            head = new Node(keys[i], head);
        }
 
        head = rearrange(head);
        printList(head);
    }
}


Output:
1 —> 3 —> 2 —> 5 —> 4 —> 7 —> 6 —> 8 —> 6 —> null
