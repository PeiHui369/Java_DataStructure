@Iterative Solution (2 Traversals)
A simple solution is to calculate the total number of nodes n in the linked list first. 
Then, the k'th node from the end will be (n-k+1)'th node from the beginning.

// A Linked List Node
class Node
{
    int data;
    Node next;
 
    Node(int data, Node next)
    {
        this.data = data;
        this.next = next;
    }
}
 
class Main
{
    // Iterative function to return the k'th node from the end in a linked list
    public static Node findKthNode(Node head, int k)
    {
        int n = 0;
        Node curr = head;
 
        // count the total number of nodes in the linked list
        while (curr != null)
        {
            curr = curr.next;
            n++;
        }
 
        // if the total number of nodes is more than or equal to `k`
        if (n >= k)
        {
            // return (n-k+1)'th node from the beginning
            curr = head;
            for (int i = 0; i < n - k; i++) {
                curr = curr.next;
            }
        }
 
        return curr;
    }
 
    public static void main(String[] args)
    {
        // input keys
        int[] keys = { 1, 2, 3, 4, 5 };
 
        Node head = null;
        for (int i = keys.length - 1; i >= 0; i--) {
            head = new Node(keys[i], head);
        }
 
        int k = 3;
        Node node = findKthNode(head, k);
 
        if (node != null) {
            System.out.println("k'th node from the end is " + node.data);
        }
    }
}

Output:

k’th node from the end is 3

------------------------------------------------
@ Single list traversal
The idea is to start from the head node and move a pointer k nodes ahead in the given list. 
Then, take another pointer starting from the head node and 
run both pointers in parallel till the first pointer reaches the end of the list. 
Now, the second pointer will point to the k'th node from the end.

// A Linked List Node
class Node
{
    int data;
    Node next;
 
    Node(int data, Node next)
    {
        this.data = data;
        this.next = next;
    }
}
 
class Main
{
    // Iterative function to return the k'th node from the end in a linked list
    public static Node findKthNode(Node head, int k)
    {
        Node curr = head;
 
        // move `k` nodes ahead in the linked list
        for (int i = 0; curr != null && i < k; i++) {
            curr = curr.next;
 
            // return if `k` is more than the total number of nodes in the list
            if (curr == null && i != k-1) {
                return null;
            }
        }
 
        // move the `head` and `curr` parallelly till `curr` reaches the list's end
        while (curr != null)
        {
            head = head.next;
            curr = curr.next;
        }
 
        // `head` will now contain the k'th node from the end
        return head;
    }
 
    public static void main(String[] args)
    {
        // input keys
        int[] keys = { 1, 2, 3, 4, 5 };
 
        Node head = null;
        for (int i = keys.length - 1; i >= 0; i--) {
            head = new Node(keys[i], head);
        }
 
        int k = 3;
        Node node = findKthNode(head, k);
 
        if (node != null) {
            System.out.println("k'th node from the end is " + node.data);
        }
    }
}

Output:

k’th node from the end is 3

------------------------------------------------------------------
@ Recursive

// A Linked List Node
class Node
{
    int data;
    Node next;
 
    Node(int data, Node next)
    {
        this.data = data;
        this.next = next;
    }
}
 
class Main
{
    // Recursive function to return the k'th node from the end in a linked list
    public static int findKthNode(Node node, int k)
    {
        // base case
        if (node == null) {
            return 0;
        }
 
        int count = findKthNode(node.next, k) + 1;
 
        if (count == k) {
            System.out.println("k'th node from the end is " + node.data);
        }
 
        return count;
    }
 
 
    public static void main(String[] args)
    {
        // input keys
        int[] keys = { 1, 2, 3, 4, 5 };
 
        Node head = null;
        for (int i = keys.length - 1; i >= 0; i--) {
            head = new Node(keys[i], head);
        }
 
        int k = 3;
        findKthNode(head, k);
    }
}
