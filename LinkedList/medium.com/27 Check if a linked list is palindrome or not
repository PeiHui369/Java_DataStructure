A simple solution would be to create a clone of the linked list, reverse it, 
and check if both linked lists are equal or not. 
This approach requires three traversals of the linked list and requires extra space for storing duplicates.

 
A better solution is to use recursion. 
The idea is to reach the end of the linked list by recursion and then 
compare if the last node has the same value as the first node and the second previous node has the same value as the second node, 
and so on using the call stack and a pointer at the beginning of the linked list.

-----------------------------------------------
// A Linked List Node
class Node
{
    int data;
    Node next = null;
 
    Node(int data) {
        this.data = data;
    }
}
 
class Main
{
    // Wrapper over `Node` class
    static class NodeWrapper
    {
        public Node node;
 
        NodeWrapper(Node node) {
            this.node = node;
        }
    }
 
    // Helper function to insert a new node at the beginning of the linked list
    public static Node push(Node head, int data)
    {
        Node node = new Node(data);
        node.next = head;
        return node;    // return node, which would be the new head
    }
 
    // Recursive function to check if the linked list is a palindrome or not
    public static boolean checkPalindrome(NodeWrapper left, Node right)
    {
        // base case
        if (right == null) {
            return true;
        }
 
        boolean result = checkPalindrome(left, right.next) &&
                            (left.node.data == right.data);
        left.node = left.node.next;
 
        return result;
    }
 
    // Function to check if the linked list is a palindrome or not
    public static boolean checkPalin(Node head)
    {
        // Wrap the `head` node, so its reference can be changed inside the
        // `checkPalindrome()`
        return checkPalindrome(new NodeWrapper(head), head);
    }
 
    public static void main(String[] args)
    {
        // input keys
        int[] keys = {1, 3, 5, 3, 1};
 
        Node head = null;
        for (int i = keys.length - 1; i >= 0; i--) {
            head = push(head, keys[i]);
        }
 
        if (checkPalin(head)) {
            System.out.println("The linked list is a palindrome");
        }
        else {
            System.out.println("The linked list is not a palindrome");
        }
    }
}

Output:

The linked list is a palindrome

===================================
@ Recursion

// A Linked List Node
class Node
{
    int data;
    Node next;
 
    Node(int data, Node next)
    {
        this.data = data;
        this.next = next;
    }
}
 
class Main
{
    // Helper function to print a given linked list
    public static void printList(Node head)
    {
        Node ptr = head;
        while (ptr != null)
        {
            System.out.print(ptr.data + " —> ");
            ptr = ptr.next;
        }
 
        System.out.println("null");
    }
 
    // Recursive function to move the last node to the front of a given linked list
    public static Node rearrange(Node head, Node prev, Node curr)
    {
        // if the current node is the last
        if (curr.next == null)
        {
            // make its next point to the first node
            curr.next = head;
 
            // set its previous node to point to null
            prev.next = null;
 
            // return current reference (new head)
            return curr;
        }
 
        return rearrange(head, curr, curr.next);
    }
 
    // Function to move the last node to the front of a linked list
    public static Node rearrange(Node head)
    {
        // if the list contains at least two nodes
        if (head != null && head.next != null) {
            head = rearrange(head, null, head);
        }
 
        return head;
    }
 
    public static void main(String[] args)
    {
        // input keys
        int[] keys = { 1, 2, 3, 4 };
 
        Node head = null;
        for (int i = keys.length - 1; i >= 0; i--) {
            head = new Node(keys[i], head);
        }
 
        head = rearrange(head);
 
        printList(head);
    }
}

Output:

4 —> 1 —> 2 —> 3 —> null

