Given two lists sorted in increasing order, return a new list representing their intersection. 
The new list should be made with its own memory – the original lists should not be changed.

The strategy is to advance up both lists and build the result list as we go. 
When the current point in both lists is the same, add a node to the result. 
Otherwise, advance whichever list is smaller. 
By exploiting the fact that both lists are sorted, we only traverse each list once.


// A Linked List Node
class Node
{
    int data;
    Node next;
 
    Node(int data, Node next)
    {
        this.data = data;
        this.next = next;
    }
}
 
class Main
{
    // Helper function to print a given linked list
    public static void printList(String msg, Node head)
    {
        System.out.print(msg);
 
        Node ptr = head;
        while (ptr != null)
        {
            System.out.print(ptr.data + " —> ");
            ptr = ptr.next;
        }
 
        System.out.println("null");
    }
 
    // Compute a new sorted list representing the intersection
    // of the two given sorted lists without using a dummy node
    public static Node sortedIntersect(Node a, Node b)
    {
        Node head = null, tail = null;
 
        // once one or the other list runs out — we are done
        while (a != null && b != null)
        {
            if (a.data == b.data)
            {
                if (head == null) {
                    tail = head = new Node(a.data, head);
                }
                else {
                    tail = tail.next = new Node(a.data, tail.next);
                }
 
                a = a.next;
                b = b.next;
            }
 
            // advance the smaller list
            else if (a.data < b.data) {
                a = a.next;
            }
            else {
                b = b.next;
            }
        }
        return head;
    }
 
    public static void main(String[] args)
    {
        // input keys
        int[] keys = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
 
        Node a = null;
        for (int i = keys.length - 1; i >= 0; i = i - 3) {
            a = new Node(keys[i], a);
        }
 
        Node b = null;
        for (int i = keys.length - 1; i >= 0; i = i - 2) {
            b = new Node(keys[i], b);
        }
 
        // print both lists
        printList("First List: ", a);
        printList("Second List: ", b);
 
        Node head = sortedIntersect(a, b);
        printList("After Intersection: ", head);
    }
}


Output:

First List: 1 —> 4 —> 7 —> 10 —> null
Second List: 2 —> 4 —> 6 —> 8 —> 10 —> null
 
After Intersection: 4 —> 10 —> null
