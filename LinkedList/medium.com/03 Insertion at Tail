General Rule: To insert/delete a node inside a list, we need a pointer to the node just before that position to change its .next field

i. Locate last node in list, change its .next field from NULL to point the new node
appendNode() = push() but adds new node at tail end instead of head
if list empty, uses reference pointer to change head pointer
otherwise uses a loop to locate last node in list

//A Linked List Node
class Node
{
    int data;
    Node next;
    
    Node(int data, Node next){
        this.data = data;
        this.next = next;
    }
}

class Main{
    //Helper function to return new linked list node from the heap
    public static Node newNode(int key){
        Node node = new Node(key, null);
        return node;
    }
    
    //Helper function to print a given linked list
    public static void printList(Node head){
        Node ptr = head;
        while (ptr != null){
            System.out.print(ptr.data + " -> ");
            ptr = ptr.next;
        }
        System.out.println("null");
    }
    
    //Function to add a new node at the tail end of the list instead of its head
    public static Node appendNode(Node head, int key){
        Node current = head;
        Node node = newNode(key);
        
        //special case for length 0
        if(current == null){
            head = node;
        }
        else{
            //locate the last node
            while (current.next != null){
                current = current.next;
            }
            current.next = node;
        }
        return head;
    }
    
    public static void main(String[] args){
        //input keys
        int[] keys = {1,2,3,4};
        
        //points to the head node of the linked list
        Node head = null;
        for(int key: keys){
            head = appendNode(head, key);
        }
        
        //print linked list
        printList(head);
    }
}

==========================================================
ii. Relies on push() to build new node
//A Linked List Node
class Node
{
    int data;
    Node next;
}

class Main
{
    //Helper function to print a given linked list
    public static void printList(Node head){
        for(Node ptr = head; ptr!=null; ptr=ptr.next){
            System.out.print(ptr.data + " -> ");
        }
        System.out.println("null");
    }

    //Helper function to insert a new node at the beginning of the linked list
    public static Node push(int data, Node head){
        //allocate a new node in a heap and set its data
        Node newNode = new Node();
        newNode.data = data;

        //set the next field of the new node to point to the new node to point to the current first node of the list
        newNode.next = head;

        //return the head to point to the new node, so it is now the first node in the list
        return newNode;
    }

    //Function to add a new node at the tail end of the list instead of its head
    public static Node appendNode(Node head, int key){
        Node current = head;

        //special case for the empty list
        if (head == null){
            head = push(key,null);
        }else{
            //locate the last node
            while (current.next != null){
                current = current.next;
            }
            //Build the node after the last node
            current.next = push(key, null);
        }
        return head;
    }

    public static void main(String[] args)
    {
        // input keys
        int[] keys = {1, 2, 3, 4};

        // points to the head node of the linked list
        Node head = null;

        for (int key: keys) {
            head = appendNode(head, key);
        }

        // print linked list
        printList(head);
    }
}
