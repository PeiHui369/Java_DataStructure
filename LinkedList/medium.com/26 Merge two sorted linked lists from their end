Write a function that takes two lists, each of which is sorted in increasing order, 
and merges the two into one list, 
which is in decreasing order, 
and returns it. 
In other words, merge two sorted linked lists from their end.

For example, consider lists a = {1, 3, 5} and b = {2, 6, 7, 10}. 
Merging both lists should yield the list {10, 7, 6, 5, 3, 2, 1}.

There are few cases to deal with – either a or b may be empty, during processing, 
either a or b may run out first, and finally, 
there’s the problem of starting the result list empty, and building it up while going through a and b.
 
We can easily solve this problem using the moveNode() function as a helper, 
which takes the node from the front of the source and moves it to the front of the destination. 
The rest of the code remains similar to the merge process of merge sort.
-------------------------------------------------------------------
// A Linked List Node
class Node
{
    int data;
    Node next;
 
    Node(int data, Node next)
    {
        this.data = data;
        this.next = next;
    }
}
 
class Main
{
    // Helper function to print a given linked list
    public static void printList(String msg, Node head)
    {
        System.out.print(msg);
 
        Node ptr = head;
        while (ptr != null)
        {
            System.out.print(ptr.data + " —> ");
            ptr = ptr.next;
        }
 
        System.out.println("null");
    }
 
    // Function to merge two sorted lists from the end
    public static Node reverseMerge(Node a, Node b)
    {
        Node result = null;
 
        while (a != null && b != null)
        {
            if (a.data < b.data)
            {
                // take the node from the front of the list `a`, and move it
                // to the front of the result
 
                Node newNode = a;
                a = a.next;
 
                newNode.next = result;
                result = newNode;
            }
            else {
 
                // take the node from the front of the list `b`, and move it
                // to the front of the result
 
                Node newNode = b;
                b = b.next;
 
                newNode.next = result;
                result = newNode;
            }
        }
 
        while (b != null)
        {
            Node newNode = b;
            b = b.next;
 
            newNode.next = result;
            result = newNode;
        }
 
        while (a != null)
        {
            Node newNode = a;
            a = a.next;
 
            newNode.next = result;
            result = newNode;
        }
 
        return result;
    }
 
    public static void main(String[] args)
    {
        Node a = null, b = null;
 
        for (int i = 6; i > 0; i = i - 2) {
            a = new Node(i, a);
        }
 
        for (int i = 9; i >= 1; i = i - 2) {
            b = new Node(i, b);
        }
 
        // print both lists
        printList("First List: ", a);
        printList("Second List: ", b);
 
        Node head = reverseMerge(a, b);
        printList("After Merge: ", head);
    }
}
Output:

First List: 2 —> 4 —> 6 —> null
Second List: 1 —> 3 —> 5 —> 7 —> 9 —> null
 
After Merge: 9 —> 7 —> 6 —> 5 —> 4 —> 3 —> 2 —> 1 —> null
